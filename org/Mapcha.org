* Database Description

#+name: create-mapcha-database
#+begin_src sql :engine postgresql :cmdline -U postgres :results silent :exports code
--CREATE ROLE gjohnson WITH LOGIN CREATEDB;
CREATE DATABASE mapcha WITH OWNER gjohnson;
\c mapcha
CREATE EXTENSION postgis;
#+end_src

#+name: create-mapcha-schema
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE SCHEMA mapcha;
#+end_src

#+name: create-mapcha-plot-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.projects (
  id          serial primary key,
  name        text not null,
  description text,
  boundary    geometry(Polygon,4326)
);

CREATE TABLE mapcha.plots (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  center     geometry(Point,4326),
  radius     double precision not null
);

CREATE INDEX mapcha_plots_project_id ON mapcha.plots (project_id);
#+end_src

#+name: create-mapcha-sample-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.samples (
  id      serial primary key,
  plot_id integer not null references mapcha.plots (id) on delete cascade on update cascade,
  point   geometry(Point,4326)
);

CREATE INDEX mapcha_samples_plot_id ON mapcha.samples (plot_id);

CREATE TABLE mapcha.sample_values (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  value      text not null
);

CREATE INDEX mapcha_sample_values_project_id ON mapcha.sample_values (project_id);
#+end_src

#+name: create-mapcha-imagery-table
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.imagery (
  id     serial primary key,
  source text not null,
  date   date,
  url    text not null
);
#+end_src

#+name: create-mapcha-user-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.users (
  id        serial primary key,
  email     text not null,
  password  text not null,
  role      text not null,
  reset_key text
);

CREATE INDEX mapcha_users_email ON mapcha.users (email);

CREATE TABLE mapcha.user_samples (
  id           serial primary key,
  user_id      integer not null references mapcha.users (id) on delete cascade on update cascade,
  sample_id    integer not null references mapcha.samples (id) on delete cascade on update cascade,
  value_id     integer not null references mapcha.sample_values (id) on delete cascade on update cascade,
  imagery_id   integer not null references mapcha.imagery (id) on delete cascade on update cascade,
  date         date
);

CREATE INDEX mapcha_user_samples_user_id ON mapcha.user_samples (user_id);
CREATE INDEX mapcha_user_samples_sample_id ON mapcha.user_samples (sample_id);
#+end_src

After creating the admin@sig-gis.com (password: administrator) and
gjohnson@sig-gis.com (password: 2bitxfer) users through the web
interface, run the following code to elevate admin@sig-gis.com to the
admin role.

#+name: grant-admin-role-to-admin-user
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
UPDATE mapcha.users
  SET role='admin'
  WHERE email='admin@sig-gis.com';
#+end_src

* Initial Study Area: Mekong River Region

  - Name :: Mekong River Region
  - Description :: Laos, Cambodia, Vietnam, Thailand, Myanmar
  - Number of plots :: 10000
  - Plot radius in meters :: 100
  - Number of samples per plot :: 15
  - Categories per sample :: Forest, Grassland, Bare Surface, Impervious Surface, Agriculture, Urban, Water, Cloud, Unknown
  - Latitude Max :: 22.5
  - Longitude Min :: 95
  - Longitude Max :: 107
  - Latitude Min :: 10.5

* Web Mapping Options

  - Google Earth :: desktop application (OpenForis CollectEarth is built on this)
  - Google Earth API :: 3D globe in browser (DEPRECATED)
  - Google Earth Engine (API) :: web-based tool for geospatial analysis (NOT FOR CUSTOM WEB INTERFACES)
  - Google Maps API :: commercial 2D web mapping API with 15m earth imagery
  - Bing Maps API :: commercial 2D web mapping API from Microsoft
  - OpenLayers :: open source 2D web mapping API (BIG)
  - Leaflet :: open source 2D web mapping API (SMALL)
  - Cesium :: open source 3D globe in browser

  *Solution*: OpenLayers w/ hi-res DigitGlobe basemap imagery.
              Incorporate Cesium through ol3-cesium module.

* TODOs
** Map coding (w/ Reagent and OpenLayers)

   - Dashboard page
     - Change "Select Project":
       1. Record project-id in an atom
       2. Show project boundary
     - Push "Analyze New Plot":
       1. Record plot-id in an atom
       2. Zoom to randomly selected plot (chosen by least number of samples)
       3. Show the buffer boundary
       4. Show 15 sample points in red
       5. Disable this button
     - Click sample point:
       1. Record the sample-id in an atom
       2. Change the point's color to yellow
     - Click sample value:
       1. Record the sample-value-id in an atom
       2. Set chosen=true on the radio button corresponding to @sample-value-id in the @user-samples map (if any)
     - Push "Select Value":
       1. Change the point's color to green
       2. Assoc a user-samples atom (holding a map) to set {@sample-id @sample-value-id}
     - Push "Save"
       1. Call mapcha.db/add-user-samples @user-samples (include sample date and source+date of the imagery)
       2. Disable this button
       3. Enable the "Analyze New Plot" button
     - Hover over sample values:
       1. Show text descriptions and example images
   - Admin page
     - Create separate buttons for previewing the project and launching it
     - Show bounding box on map as lat/lon coords are input
     - Create a preview image of the aggregated plot points (use color ramp green-red or circle size to indicate number of points per area)
   - Home page
     - Show study area on a map with plots highlighted (use color ramp red-green based on number of samples filled in)

** UI improvements

   - Add "Plots completed" label to Dashboard UI
   - Add "Percent agreement with other users" label to Dashboard UI
   - Add date of hi-res imagery (month and year) to Dashboard UI
   - Add a Quit button to the Dashboard UI
   - Add UA form validators (through html input tag options) to the Admin page
   - Add a Mapcha description to the Home page (use dl/dt/dd tags for text sections)
   - Add the spinner.gif after the "Create and launch this project" button on the Admin page, disable the button, and change the text to "Processing...please wait..."
   - Add "First Name", "Last Name", and "Institution" fields to Register and Account pages

** Next week

   - Create a unique URL per project (e.g., http://mapcha.sig-gis.com/project/my-project-name) <-- do we really need this?
   - Allow an admin to select the imagery datasource (Digital Globe, Google Earth Engine?, locally hosted "chipset", other image server)
   - Allow an admin to upload a plots and points shapefile to create a new project (point features are the categories list)
   - Make https://github.com/sig-gis/mapcha/settings a private repository (probably need to delete another repository first)
   - Include imagery date in user_samples (look up DigitalGlobe imagery vintage)
   - Incorporate Cesium into the map interfaces for a 3D globe option https://github.com/openlayers/ol3-cesium
   - Include Facebook authentication as a login option
