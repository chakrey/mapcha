* Database Description

#+name: create-mapcha-database
#+begin_src sql :engine postgresql :cmdline -U postgres :results silent :exports code
--CREATE ROLE gjohnson WITH LOGIN CREATEDB;
CREATE DATABASE mapcha WITH OWNER gjohnson;
\c mapcha
CREATE EXTENSION postgis;
#+end_src

#+name: create-mapcha-schema
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE SCHEMA mapcha;
#+end_src

#+name: create-mapcha-plot-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.projects (
  id          serial primary key,
  name        text not null,
  description text,
  boundary    geometry(Polygon,4326)
);

CREATE TABLE mapcha.plots (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  center     geometry(Point,4326),
  radius     double precision not null
);

CREATE INDEX mapcha_plots_project_id ON mapcha.plots (project_id);
#+end_src

#+name: create-mapcha-sample-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.samples (
  id      serial primary key,
  plot_id integer not null references mapcha.plots (id) on delete cascade on update cascade,
  point   geometry(Point,4326)
);

CREATE INDEX mapcha_samples_plot_id ON mapcha.samples (plot_id);

CREATE TABLE mapcha.sample_values (
  id         serial primary key,
  project_id integer not null references mapcha.projects (id) on delete cascade on update cascade,
  value      text not null
);

CREATE INDEX mapcha_sample_values_project_id ON mapcha.sample_values (project_id);
#+end_src

#+name: create-mapcha-user-tables
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
CREATE TABLE mapcha.users (
  id        serial primary key,
  email     text not null,
  password  text not null,
  role      text not null,
  reset_key text
);

CREATE INDEX mapcha_users_email ON mapcha.users (email);

CREATE TABLE mapcha.user_samples (
  id           serial primary key,
  user_id      integer not null references mapcha.users (id) on delete cascade on update cascade,
  sample_id    integer not null references mapcha.samples (id) on delete cascade on update cascade,
  value_id     integer not null references mapcha.sample_values (id) on delete cascade on update cascade,
  imagery_date date
);

CREATE INDEX mapcha_user_samples_user_id ON mapcha.user_samples (user_id);
CREATE INDEX mapcha_user_samples_sample_id ON mapcha.user_samples (sample_id);
#+end_src

After creating the admin@sig-gis.com (password: administrator) and
gjohnson@sig-gis.com (password: 2bitxfer) users through the web
interface, run the following code to elevate admin@sig-gis.com to the
admin role.

#+name: grant-admin-role-to-admin-user
#+begin_src sql :engine postgresql :cmdline mapcha :results silent :exports code
UPDATE mapcha.users
  SET role='admin'
  WHERE email='admin@sig-gis.com';
#+end_src

* Initial Study Area: Mekong River Region

- Name :: Mekong River Region
- Description :: Laos, Cambodia, Vietnam, Thailand, Myanmar
- Number of plots :: 10000
- Plot radius in meters :: 100
- Number of samples per plot :: 15
- Categories per sample :: Forest, Grassland, Bare Surface, Impervious Surface, Agriculture, Urban, Water, Cloud, Unknown
- Latitude Max :: 22.5
- Longitude Min :: 95
- Longitude Max :: 107
- Latitude Min :: 10.5

* Home Page

1. [X] Title of project
2. [X] Description of project
3. [ ] Study area on a map with plots on the map (color ramp for plots red-green based on number of samples filled in)

* Account Pages

Beta Features:

1. Optional: Facebook authentication

* Admin Page

Alpha Features:

1. [X] Create Project
2. [X] Input bounding box
3. [X] Input number of plots
4. [X] Input buffer size for each plot
5. [X] Input number of samples per plot
6. [X] Input list of categories per sample

Beta Features:

1. Upload a plots and point shapefile (point features are the categories list)
2. Satellite Imagery Selection:
   Admin should be able to select the imagery datasource (Google Earth Engine, locally hosted "chipset", other image server)
   NOTE: Imagery for the prototype should be drawn from Google Earth API (DEPRECATED!)
         Our best alternative is https://www.digitalglobe.com/ (Maps API, GBDX, Basemap)
3. God Screen (show map)

* User Page

Unique URL per project (e.g., http://mapcha.sig-gis.com/project/my-project-name

Page Components:

1. Map image front and center (hi-res imagery, plot boundary, samples in gray)
2. List of categories to fill in with description and example
3. Date of hi-res imagery (month and year)
4. Plots completed
5. Percent agreement with other users

User workflow:

1. Randomly assign a plot to the user based on those that have been analyzed by the least number of users
2. Click sample
3. Click category (or unknown)
4. Once all are assigned, click Submit
5. Increment metadata on this plot for number of users that have worked on this one
6. Perform submission procedure (see below)
7. Show next plot

Submission procedure:

1. Record sample assignments
2. Record date and source of the imagery
3. Record username
4. Record IP address of the user

* Web Mapping Options

- Google Earth :: desktop application (OpenForis CollectEarth is built on this)
- Google Earth API :: 3D globe in browser (DEPRECATED)
- Google Earth Engine (API) :: web-based tool for geospatial analysis (NOT FOR CUSTOM WEB INTERFACES)
- Google Maps API :: commercial 2D web mapping API with 15m earth imagery
- Bing Maps API :: commercial 2D web mapping API from Microsoft
- OpenLayers :: open source 2D web mapping API (BIG)
- Leaflet :: open source 2D web mapping API (SMALL)
- Cesium :: open source 3D globe in browser

Solution: OpenLayers w/ hi-res DigitGlobe basemap imagery.
          Incorporate Cesium through ol3-cesium module.
